---
- name: Avi SE | KVM | Requirements | Check variables
  assert:
    that:
      - "{{ item }} != None"
    msg: "{{ item }} must be provided"
  with_items:
    - kvm_host_ip
    - kvm_vm_hostname
    - kvm_host_username
    - kvm_host_password
    - se_kvm_ctrl_ip
    - se_kvm_ctrl_username
    - se_kvm_ctrl_password
    - se_kvm_ctrl_version
    - se_kvm_mgmt_ip
    - se_kvm_mgmt_mask
    - se_kvm_default_gw
    - se_bond_seq
    - kvm_host_mgmt_intf
    - kvm_pinning
    - kvm_virt_intf_name
    - kvm_total_num_vfs

- name: "Avi SE | KVM | Check vm {{ kvm_vm_hostname }} exist or not"
  command: virsh dominfo {{ kvm_vm_hostname }}
  register: domain_information
  ignore_errors: yes

- name: "Avi SE | KVM | Destroying the existing VM"
  command: "virsh destroy {{ kvm_vm_hostname }}"
  when: 'domain_information.stdout | length > 0 and kvm_force_mode'

- name: "Avi SE | KVM | Removing the existing VM"
  command: "virsh undefine {{ kvm_vm_hostname }}"
  when: 'domain_information.stdout | length > 0 and kvm_force_mode'

- name: "Avi SE | KVM | Exit the execution"
  fail:
    msg: "Not overwriting {{ kvm_vm_hostname }}. Exiting..."
  when: 'domain_information.stdout | length > 0 and not kvm_force_mode'

- name: "Avi SE | KVM | Removing the existing VM data and qcow2"
  file:
    path: "{{ item }}"
    state: absent
  with_items:
    - "/root/{{ kvm_vm_hostname }}"
    - "/var/lib/libvirt/images/{{ kvm_vm_hostname }}.qcow2"
  when: 'domain_information.stdout | length > 0 and kvm_force_mode'

- name: "Avi SE | KVM | Validate total no of vfs and total intf names are equal or not"
  fail:
    msg: " Total no of vfs {{ kvm_total_num_vfs }} is not equal to the total no of kvm_virt_intf_name {{ kvm_virt_intf_name | length }}"
  when: kvm_total_num_vfs != kvm_virt_intf_name | length

- name: "Avi SE | KVM | Check pinning support on host"
  fail:
    msg: "Pinning is not supportable for the os version {{ hostvars[inventory_hostname].ansible_distribution_version }}"
  when: 'hostvars[inventory_hostname].ansible_distribution_version | float == 16.04 and kvm_pinning'

- name: "Avi SE | KVM | Create directory on KVM Host"
  file:
   path: "/root/{{ kvm_vm_hostname }}"
   state: directory
   mode: 0644

- name: "Avi SE | KVM | Get the cloud uuid from Default-Cloud"
  avi_api_session:
    controller: "{{ se_kvm_ctrl_ip }}"
    username: "{{ se_kvm_ctrl_username }}"
    password: "{{ se_kvm_ctrl_password }}"
    tenant: "admin"
    api_version: "{{ se_kvm_ctrl_version }}"
    http_method: get
    path: "cloud?name=Default-Cloud"
  register: se_cloud_data
  when: 'se_auth_token is undefined'
  delegate_to: localhost

- name: "Avi SE | KVM | Get a token from the Avi Controller"
  avi_api_session:
    controller: "{{ se_kvm_ctrl_ip }}"
    username: "{{ se_kvm_ctrl_username }}"
    password: "{{ se_kvm_ctrl_password }}"
    tenant: "admin"
    api_version: "{{ se_kvm_ctrl_version }}"
    http_method: get
    path: securetoken-generate?cloud_uuid={{ se_cloud_data.obj.results[0].uuid }}
  register: se_authtoken
  when: 'se_auth_token is undefined'
  delegate_to: localhost

- name: "Avi SE | KVM | Image deploy | generate SE image on the controller"
  avi_api_session:
    controller: "{{ se_kvm_ctrl_ip }}"
    username: "{{ se_kvm_ctrl_username }}"
    password: "{{ se_kvm_ctrl_password }}"
    api_version: "{{ se_kvm_ctrl_version }}"
    http_method: post
    path: 'fileservice/seova'
    timeout: "{{ se_image_gen_timeout }}"
    data:
      file_format: qcow2
  when: 'kvm_vm_base_img is undefined'
  delegate_to: localhost

- name: "Avi SE | KVM | Get the se.qcow2 from the Avi Controller"
  avi_api_fileservice:
    controller: "{{ se_kvm_ctrl_ip }}"
    username: "{{ se_kvm_ctrl_username }}"
    password: "{{ se_kvm_ctrl_password }}"
    upload: false
    path: seova
    file_path: /tmp/se.qcow2
    params:
      file_format: qcow2
    api_version: "{{ se_kvm_ctrl_version }}"
  when: 'kvm_vm_base_img is undefined'
  delegate_to: localhost

- name: "Avi SE | KVM | Copy se.qcow2 file into /root/{{ kvm_vm_hostname }} on KVM host"
  copy:
    src: "/tmp/se.qcow2"
    dest: "/root/{{ kvm_vm_hostname }}"
    remote_src: no
    owner: root
    mode: 0644
  when: 'kvm_vm_base_img is undefined'

- name: "Avi SE | KVM | Set SE authentication token"
  set_fact:
    se_auth_token: "{{ se_authtoken.obj.auth_token }}"
  when: 'se_auth_token is undefined'

- name: "Avi SE | KVM | Print auth token"
  debug: msg="Recieved Authentication {{ se_auth_token }} from {{ se_kvm_ctrl_ip }}"
